import type { CurveFactory } from "d3-shape";
import { omit } from "lodash-es";
import { getUID, type ConnectionBase, type NodeBase } from "rete";
import { Actor, AnyActor } from "xstate";

import type { ConnectionConfigRecord } from "../controls/socket-generator";
import type { Editor } from "../editor";
import { inputSocketMachine } from "../input-socket";
import type { BaseMachine, BaseNode } from "../nodes/base";
import { outputSocketMachine } from "../output-socket";

type StringKeyof<T> = Extract<keyof T, string>;

export class Connection<
  Source extends BaseNode<any, any, any> = BaseNode<any, any, any>,
  Target extends BaseNode<any, any, any> = BaseNode<any, any, any>,
> implements ConnectionBase
{
  /**
   * Connection id, unique string generated by `getUID` function
   */
  id: ConnectionBase["id"];
  /**
   * Source node id
   */
  source: NodeBase["id"];
  /**
   * Target node id
   */
  target: NodeBase["id"];

  curve?: CurveFactory;
  isLoop?: boolean;
  isMagnetic?: boolean;

  /**
   * @constructor
   * @param source Source node instance
   * @param sourceOutput Source node output key
   * @param target Target node instance
   * @param targetInput Target node input key
   */
  sourceNode: BaseNode<BaseMachine, any, any, any>;
  targetNode: BaseNode<BaseMachine, any, any, any>;

  // sourceActor?: AnyActor;
  // targetActor?: AnyActor;

  destroy: () => Promise<void>;
  sourceSocketActor: Actor<typeof outputSocketMachine>;
  targetSocketActor: Actor<typeof inputSocketMachine>;

  get targetDefinition() {
    return this.targetSocketActor?.getSnapshot().context.definition;
  }

  get sourceActorId() {
    return this.sourceSocketActor?.getSnapshot().context.parent.id;
  }

  get sourceActor(): AnyActor {
    return this.editor.actor?.system.get(this.sourceActorId);
  }

  get targetActorId() {
    return this.targetSocketActor?.getSnapshot().context.parent.id;
  }

  get targetActor(): AnyActor {
    return this.editor.actor?.system.get(this.targetActorId);
  }

  get sourceDefinition() {
    return this.sourceSocketActor?.getSnapshot().context.definition;
  }

  get sourceValue() {
    if (
      this.targetDefinition["x-compatible"]?.includes(
        this.sourceDefinition.type,
      )
    ) {
      return this.sourceActor;
    }
    return this.sourceActor.getSnapshot().context.outputs[
      this.sourceDefinition["x-key"]
    ];
  }

  get targetValue() {
    return this.targetActor.getSnapshot().context.inputs[
      this.targetDefinition["x-key"]
    ];
  }

  constructor(
    source: Source,
    public sourceOutput: StringKeyof<Source["outputs"]>,
    target: Target,
    public targetInput: StringKeyof<Target["inputs"]>,
    public editor: Editor,
  ) {
    if (!source.outputs[sourceOutput as string]) {
      throw new Error(
        `source node doesn't have output with a key ${String(sourceOutput)}`,
      );
    }
    if (!target.inputs[targetInput as string]) {
      throw new Error(
        `target node doesn't have input with a key ${String(targetInput)}`,
      );
    }
    this.id = getUID();
    this.source = source.id;
    this.target = target.id;

    console.log("connection", this);

    this.sourceNode = this.editor.editor.getNode(source.id);
    this.targetNode = this.editor.editor.getNode(target.id);

    this.sourceSocketActor = this.editor.actor?.system.get(this.sourceOutput);
    this.targetSocketActor = this.editor.actor?.system.get(this.targetInput);

    this.targetSocketActor.send({
      type: "UPDATE_SOCKET",
      params: {
        "x-connection": {
          ...(this.targetDefinition["isMultiple"]
            ? this.targetDefinition["x-connection"]
            : {}),
          [this.sourceSocketActor.id]: this.sourceSocketActor.ref,
        } as ConnectionConfigRecord,
      },
    });
    console.log("SENDING INITIAL VALUE", this.sourceValue);

    this.targetSocketActor.send({
      type: "SET_VALUE",
      params: {
        value: this.sourceValue,
      },
      origin: {
        type: "connection",
        id: this.id,
      },
    });

    this.sourceSocketActor.send({
      type: "UPDATE_SOCKET",
      params: {
        "x-connection": {
          ...this.sourceDefinition?.["x-connection"],
          [this.targetSocketActor.id]: this.targetSocketActor.ref,
        } as ConnectionConfigRecord,
      },
    });

    this.destroy = async () => {
      this.targetSocketActor.send({
        type: "UPDATE_SOCKET",
        params: {
          "x-connection": {
            ...omit(
              this.targetDefinition["x-connection"],
              this.sourceSocketActor.id,
            ),
            // [innerActor.id]: "ORIGINAL",
          } as ConnectionConfigRecord,
        },
      });

      this.sourceSocketActor.send({
        type: "UPDATE_SOCKET",
        params: {
          "x-connection": {
            ...omit(
              this.sourceDefinition["x-connection"],
              this.targetSocketActor.id,
            ),
          } as ConnectionConfigRecord,
        },
      });
    };
  }

  get identifier() {
    return `${this.sourceNode.label}-${this.sourceOutput}-${this.targetNode.label}-${this.targetInput}`;
  }

  public isActorRef = false;

  public toJSON() {
    return {
      id: this.id,
      source: this.source,
      target: this.target,
      sourceOutput: this.sourceOutput,
      targetInput: this.targetInput,
    };
  }
}
